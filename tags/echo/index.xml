<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>echo on /home/lunarxlark/.config/blog</title><link>https://lunarxlark.github.io/tags/echo/</link><description>Recent content in echo on /home/lunarxlark/.config/blog</description><generator>Hugo -- gohugo.io</generator><copyright>© lunarxlark</copyright><lastBuildDate>Tue, 10 Nov 2020 02:51:09 +0900</lastBuildDate><atom:link href="https://lunarxlark.github.io/tags/echo/index.xml" rel="self" type="application/rss+xml"/><item><title>Custome Logger using LoggerWithConfig in Echo</title><link>https://lunarxlark.github.io/posts/echo-custom-logger/</link><pubDate>Tue, 10 Nov 2020 02:51:09 +0900</pubDate><guid>https://lunarxlark.github.io/posts/echo-custom-logger/</guid><description>WebFramework EchoのLoggerを弄っていて気付いた点があったのでメモ。
sample code
箇条書き responseログにHeader X-Any-Headerを出力したい場合、ログフォーマットに&amp;quot;any_header&amp;quot;:${header:x-any-header}を指定すればいいよ responseログにQueryParamerter ?anyparam=xxxを出力したい場合、ログフォーマットに&amp;quot;any_query&amp;quot;:${query:anyparam}を指定すればいいよ デフォルトで出力されるカラム&amp;rsquo;id&amp;rsquo;はHeader X-Request-Id を指定すると出力されるよ Skipperを設定することで、path毎にログ出力する/しない等を設定出来るよ 1, 2, 3はEchoのそういう機能だってことで特にありません。 4は結構便利だなと思いました。以下のサンプルコードでは、/healthcheckに来た場合とCI/CD等での自動テスト時にはresponseログを出力しないようにする設定例です。
sample // Middleware e.Use(middleware.LoggerWithConfig(customLogger())) // Handler e.GET(&amp;#34;/greet&amp;#34;, greet) e.GET(&amp;#34;/healthcheck&amp;#34;, healthcheck) var ResponseLogForamt = `{` + `&amp;#34;time&amp;#34;:&amp;#34;${time_custom}&amp;#34;,` + `&amp;#34;id&amp;#34;:&amp;#34;${id}&amp;#34;,` + `&amp;#34;remote_ip&amp;#34;:&amp;#34;${remote_ip}&amp;#34;,` + `&amp;#34;host&amp;#34;:&amp;#34;${host}&amp;#34;,` + `&amp;#34;method&amp;#34;:&amp;#34;${method}&amp;#34;,` + `&amp;#34;uri&amp;#34;:&amp;#34;${uri}&amp;#34;,` + `&amp;#34;user_agent&amp;#34;:&amp;#34;${user_agent}&amp;#34;,` + `&amp;#34;status&amp;#34;:${status},` + `&amp;#34;error&amp;#34;:&amp;#34;${error}&amp;#34;,` + `&amp;#34;latency&amp;#34;:${latency},` + `&amp;#34;latency_human&amp;#34;:&amp;#34;${latency_human}&amp;#34;,` + `&amp;#34;bytes_in&amp;#34;:${bytes_in},` + `&amp;#34;bytes_out&amp;#34;:${bytes_out},` + `&amp;#34;forwarded-for&amp;#34;:&amp;#34;${header:x-forwarded-for}&amp;#34;,` + `&amp;#34;same-as-id&amp;#34;:${header:X-Request-Id},` + `&amp;#34;query&amp;#34;:${query:lang}` + `}` func customLogger() middleware.LoggerConfig { cl := middleware.</description></item></channel></rss>