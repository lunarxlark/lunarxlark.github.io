<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vim on /home/lunarxlark/.config/blog</title><link>https://lunarxlark.github.io/tags/vim/</link><description>Recent content in vim on /home/lunarxlark/.config/blog</description><generator>Hugo -- gohugo.io</generator><copyright>© lunarxlark</copyright><lastBuildDate>Wed, 16 Jun 2021 08:53:28 +0900</lastBuildDate><atom:link href="https://lunarxlark.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>2021年版 vim + goplsの設定</title><link>https://lunarxlark.github.io/articles/articles/2021_vim_gopls/</link><pubDate>Wed, 16 Jun 2021 08:53:28 +0900</pubDate><guid>https://lunarxlark.github.io/articles/articles/2021_vim_gopls/</guid><description>goplsが出てから, vimでも定義ジャンプやシンボル検索、ドキュメント参照等が行えるようになった。
たまにVSCodeを触りvimでの作業を改善できないか考える中で、自身の設定が古いことに気付いた。また、ググってもなかなか出てこなかったのでメモとして記述する。
cf. GitHub dotfiles
いきなりだが、vimrcとvim-lsp-settings/settings.jsonを抜粋して貼り付ける。
以前、GoではLspCodeAction, LspCodeLens等をサポートしていなかったが、今では使えるようになっている。
キーマップに設定している関数は全てGoで使用出来る。
ただし、カーソルがどこにいても実行出来るわけではないので注意が必要。
LspCodeActionはカーソルの位置によって実行内容が変わるのでそこも注意。
...Plug &amp;#39;prabirshrestha/vim-lsp&amp;#39;Plug &amp;#39;mattn/vim-lsp-settings&amp;#39;Plug &amp;#39;prabirshrestha/asyncomplete-lsp.vim&amp;#39;Plug &amp;#39;mattn/vim-gomod&amp;#39;...&amp;#34; ------------------------------------------------------------------------------&amp;#34; vim-lsp&amp;#34; ------------------------------------------------------------------------------function! s:on_lsp_buffer_enabled() abort setlocal omnifunc=lsp#complete setlocal signcolumn=yes if exists(&amp;#39;+tagfunc&amp;#39;) | setlocal tagfunc=lsp#tagfunc | endif nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;ac &amp;lt;plug&amp;gt;(lsp-code-action) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;cl &amp;lt;plug&amp;gt;(lsp-code-lens) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;df &amp;lt;plug&amp;gt;(lsp-definition) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;dd &amp;lt;plug&amp;gt;(lsp-document-diagnostics) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;im &amp;lt;plug&amp;gt;(lsp-implementation) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;pdf &amp;lt;plug&amp;gt;(lsp-peek-definition) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;sm &amp;lt;plug&amp;gt;(lsp-document-symbol-search) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;Sm &amp;lt;plug&amp;gt;(lsp-workspace-symbol-search) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;rf &amp;lt;plug&amp;gt;(lsp-references) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;td &amp;lt;plug&amp;gt;(lsp-type-definition) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;rn &amp;lt;plug&amp;gt;(lsp-rename) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;en &amp;lt;plug&amp;gt;(lsp-next-error) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;ep &amp;lt;plug&amp;gt;(lsp-previous-error) nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;ho &amp;lt;plug&amp;gt;(lsp-hover) let g:lsp_format_sync_timeout = 500 autocmd!</description></item><item><title>From denite.nvim To fzf.vim</title><link>https://lunarxlark.github.io/articles/articles/from-denite-to-fzf/</link><pubDate>Tue, 11 Feb 2020 15:57:07 +0900</pubDate><guid>https://lunarxlark.github.io/articles/articles/from-denite-to-fzf/</guid><description>denite.nvimとfzf.vimって比較記事?
違います。断捨離した結果、fzf.vimで事足りてしまったという記事です。
denite.nvimとfzf.vimは、一見やれることが似ているように見えますが提供しているインタフェースが違います。 denite.nvimの方が拡張性/汎用性が高いです。Pythonスクリプトを呼び出せますし。
どうしてやめたん？
Python3とpipの環境整備に疲れたというのが理由で完全に力不足なだけです。
そもそも使いこなせていなかったっていうのも大きい。自分に必要な機能が何か見直したら次のがあれば十分っぽい。
コマンドの結果の一覧表示(x-motemen/ghq list, mattn/memo list, history等) 一覧表示の後のアクションを指定可能(cd, vim) buffer切替 fzf.vimはfzfのついでに入れていただけで全く使っていなかった。Shougo/denite.nvimでfzf.vimで同じことが出来るし、sourceの拡張がいくつもあるのでそれで十分だった。
もともとfzfが好きなのもあって、fzf.vimで上記が実現出来るように設定した、っていうかhelpからパクってきた。
何日か使っていて快適に使えているので結構満足。previewはbatってコマンド入れないとsyntax highlightされなかったのでいれたけど、なんとなくそっちの方がリッチっぽいという理由だけなので重ければそのうち消す。
command! -bang -nargs=? -complete=dir Files call fzf#vim#files( \ &amp;lt;q-args&amp;gt;, \ fzf#vim#with_preview(), \ &amp;lt;bang&amp;gt;0)command! -nargs=0 Ghq call fzf#run({ \ &amp;#39;source&amp;#39; : &amp;#39;ghq list --full-path&amp;#39;, \ &amp;#39;sink&amp;#39; : &amp;#39;cd&amp;#39; \})command! -nargs=0 Mru call fzf#run({ \ &amp;#39;source&amp;#39; : v:oldfiles, \ &amp;#39;sink&amp;#39; : &amp;#39;edit&amp;#39;, \ &amp;#39;options&amp;#39; : &amp;#39;-m -x +s&amp;#39;, \ &amp;#39;down&amp;#39; : &amp;#39;40%&amp;#39; \})command!</description></item><item><title>SQL*Plusでviを使う</title><link>https://lunarxlark.github.io/articles/articles/how-to-use-vi-in-sqlplus/</link><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid>https://lunarxlark.github.io/articles/articles/how-to-use-vi-in-sqlplus/</guid><description>SQL&amp;gt; DEFINE _EDITOR = vi SQL&amp;gt; edit SQL&amp;gt; / -- 実行 glogin.sqlに設定することでDEFINE _EDITOR = viを省略できる</description></item></channel></rss>