<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vegeta on /home/lunarxlark/.config/blog</title><link>https://lunarxlark.github.io/tags/vegeta/</link><description>Recent content in vegeta on /home/lunarxlark/.config/blog</description><generator>Hugo -- gohugo.io</generator><copyright>© lunarxlark</copyright><lastBuildDate>Thu, 11 Mar 2021 03:08:11 +0900</lastBuildDate><atom:link href="https://lunarxlark.github.io/tags/vegeta/index.xml" rel="self" type="application/rss+xml"/><item><title>load test with dynamic payload by tsenart/vegeta</title><link>https://lunarxlark.github.io/posts/go/vegeta-dynamic-payload/</link><pubDate>Thu, 11 Mar 2021 03:08:11 +0900</pubDate><guid>https://lunarxlark.github.io/posts/go/vegeta-dynamic-payload/</guid><description>負荷テストツールvegetaのコマンドでの使い方ぐはググるとたくさん出てくるが、ライブラリとして仕様している記事が少なく手こずったのでメモ代わりに記事にする。
やりたいこと リクエスト毎にRequestの内容を動的に変えて、負荷をかけたかった。
Headerに持つタイムスタンプがリクエスト時のタイムスタンプになるように。 userIdはuniqueになるように。(同じユーザだと重複リクエストを弾く処理があったため。) 具体的には下記のような感じでリクエストを送りたい。
{&amp;#34;header&amp;#34;: {&amp;#34;timestamp&amp;#34;:&amp;#34;1234&amp;#34;}, &amp;#34;body&amp;#34;: {&amp;#34;userId&amp;#34;: &amp;#34;lunar-1&amp;#34;}} {&amp;#34;header&amp;#34;: {&amp;#34;timestamp&amp;#34;:&amp;#34;1234&amp;#34;}, &amp;#34;body&amp;#34;: {&amp;#34;userId&amp;#34;: &amp;#34;lunar-2&amp;#34;}} {&amp;#34;header&amp;#34;: {&amp;#34;timestamp&amp;#34;:&amp;#34;1235&amp;#34;}, &amp;#34;body&amp;#34;: {&amp;#34;userId&amp;#34;: &amp;#34;lunar-3&amp;#34;}} ... {&amp;#34;header&amp;#34;: {&amp;#34;timestamp&amp;#34;:&amp;#34;1240&amp;#34;}, &amp;#34;body&amp;#34;: {&amp;#34;userId&amp;#34;: &amp;#34;lunar-n&amp;#34;}} vegeta.Targeterは func(*vegeta.Target) error である。
また、vegeta.Attackは、vegeta.Targeterをgoroutineで都度呼び出して、Targeter内からTargetに基づきリクエストしていることから、都度Targetが変わるようなTargeterを返す関数を作成し、それをAttack時に呼び出せば良さそう。
ってことが、 [QUESTION] Sending requests with dynamic body #330に書いてあって何度も行き来した結果やっと理解できた&amp;hellip;。
上記を拝借して以下のようにすることで目的を達成できた。
type yourRequestBody struct { UserID string } targeter := func(id uint64) vegeta.Targeter { return func(t *vegeta.Target) error { execTime := time.Now() requestTimestamp := execTime.Unix() req := &amp;amp;http.Request{ Method: &amp;#34;POST&amp;#34;, URL: &amp;amp;url.</description></item></channel></rss>